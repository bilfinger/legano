'use strict';const cfg=require('./package').config,port=process.env.OPENSHIFT_NODEJS_PORT||cfg.webport,ipaddress=process.env.OPENSHIFT_NODEJS_IP||'*',http=require('http'),zlib=require('zlib'),fs=require('fs'),dgram=require('dgram'),router=require(cfg.path+'swnode/swRouter'),slog=cfg.is_log?require(cfg.path+'swnode/swLogStream')('./log/server.log'):undefined,mud=require(cfg.path+'swnode/modbus_udp'),esfm=require('./esf.min'),cb=e => env=e,sb=e => sub=e,memcache={};let env={},sub={subscribers:[],subactive:false},esm=[{ev:'add',cb:esfm.post},{ev:'badd',cb:esfm.bpost},{ev:'delete',cb:esfm.delete},{ev:'keep',cb:esfm.keep},{ev:'update',cb:esfm.put},{ev:'bupdate',cb:esfm.bput},{ev:'kvupdate',cb:esfm.kvput},{ev:'akvupdate',cb:esfm.akvput},{ev:'pkvupdate',cb:esfm.pkvput}],utime=Date.now();http.createServer((req,res) => router(req,res,slog,cb,env,memcache,esfm.keep,cfg.table,sb,sub,esm,cfg)).listen(port,ipaddress,() => {console.log(`SERVER listen on port ${ cfg.host }:${ cfg.webport }:${ cfg.data }/${ cfg.table } ...`)});const rf=c => {fs.readFile('./data/'+c+'.'+cfg.flatdata,(err,data) => {if(err)throw err;env[c]=JSON.parse(data)})};const wf=c => {fs.writeFile('./data/'+c+'.'+cfg.flatdata,JSON.stringify(env[c]),function(err){if(err)throw err})};const rbf=c => {const readStream=fs.createReadStream('./data/'+c+'.'+cfg.data),writeStream=new require('stream').Writable();;let data=[],data_length=0;if(cfg.is_debug)console.log('RBF',c);writeStream.on('error',e => console.log('ERROR WRITESTREAM',c,e));writeStream.on('finish',() => {if(cfg.is_debug)console.log('Finish WRITESTREAM',c,data.length,data_length,typeof data[0]);let buf=new Buffer(data_length),pos=0;for(let i=0,len=data.length,pos=0;i<len;i++){data[i].copy(buf,pos);pos+=data[i].length}env[c]=JSON.parse(buf.toString())});writeStream.write=d => {if(cfg.is_debug)console.log(c,'WRITE',d.length,data_length);data.push(d);data_length+=d.length};readStream.pipe(zlib.createInflate()).pipe(writeStream)};const wbf=c => {let ut=env[c].reduce((t,e) => Math.max(t,e._utime),0);env['_status'].push({t:c+'|length:'+env[c].length+'|utime:'+ut});if(isNaN(ut)||ut<utime){console.log('WRITE NICHT NÃ–TIG',c)}else {const ws=fs.createWriteStream('./data/'+c+'.'+cfg.data),readStream=new require('stream').Readable();;readStream.push(JSON.stringify(env[c]));readStream.push(null);readStream.pipe(zlib.createDeflate()).pipe(ws);if(cfg.is_debug)console.log('WBF',c,env[c].length)}};env['_all']=[];env['_all']=env['_all'].concat(cfg.tabs);env['_all']=env['_all'].concat(cfg.flatintabs);env['_log']=[];env['_status']=[];cfg.tabs.forEach(e => rbf(e));cfg.flatintabs.forEach(e => rf(e));setInterval(() => {env['_status']=[];env['_all'].forEach(e => wbf(e)),utime=Date.now()},36000);setInterval(() => cfg.flatouttabs.forEach(e => wf(e)),36000);fs.readdir('./app',(r,d) => d.forEach(e => fs.readFile('./app/'+e,(err,data) => {if(err)throw err;memcache['/'+e]=data;if(cfg.is_debug)console.log(e,' loaded..',data.length)})));if(cfg.is_qatool){console.log('QA_TOOL INITIALISAZION');const dsocket=dgram.createSocket('udp4');dsocket.bind(cfg.udpport);dsocket.on('error',err => {console.log('SERVER-ERROR',err.stack);dsocket.close();ERRLOG.write(Date.now()+'SERVER-ERROR '+err.stack)});dsocket.on('listening',() => {var _adr=dsocket.address();console.log('%s:%d module-server listening.. ',_adr.address,_adr.port)});dsocket.on('message',(msg,rinfo) => {try{var _j=JSON.parse(msg)}catch(e){console.log('ERROR-JSON-PARSE DSOCKET MESSAGE',e)}console.log('DSOCKET MESSAGE ',Date.now(),msg.length,rinfo.address,rinfo.port,_j.device,_j.unit,_j.key,_j.value);var field='',elem=Array.prototype.filter.call(env[cfg.table],e => e.station===_j.device);if(elem.length>0){if(_j.key==='Teilio')field='teilio';if(_j.key==='Teilnio')field='teilnio';if(_j.key==='Status')field='lstatus';if(_j.key==='TaktIst')field='taktist';if(_j.key==='Status')field='lstatus';monats_wechsel(elem[0]);if(_j.key==='Teilio'&&parseInt(_j.value)===0)elem[0]['strigger']=1;schicht_wechsel(elem[0]);elem_update(elem[0],{key:_j.key,value:_j.value,field:field},esfm,sub,cfg.table,false);if(cfg.is_splunklog)require(cfg.path+'swnode/swsendUDP')(JSON.stringify(_j),cfg.splkhost,cfg.splkport)}})}const monats_wechsel=elem => {if(elem['mtrigger']){elem['mtrigger']=0;elem['hteilio']=[];elem['hteilnio']=[];elem['hteilabs']=[];elem['hteilabsp']=[];elem['hstimes']=[]}};const schicht_wechsel=elem => {if(elem['strigger']){const oldteilio=elem['teilio'];const oldteilnio=elem['teilnio'];const schichtsoll=elem['teilesoll'];const oldstatus=elem['lstatus'];const lnow=Date.now();console.log('TRIGGER',oldteilio);elem['strigger']=0;elem['stimes'][oldstatus]=(elem['stimes'][oldstatus]||0)+(lnow-elem['sdat'])/60000;elem['sdat']=lnow;elem['hteilio'].push(oldteilio);if(elem['hteilio'].length>100)elem['hteilio'].shift();elem['hteilnio'].push(oldteilnio);if(elem['hteilnio'].length>100)elem['hteilnio'].shift();elem['hteilabs'].push(oldteilio-schichtsoll);if(elem['hteilabs'].length>100)elem['hteilabs'].shift();elem['hteilabsp'].push((oldteilio-schichtsoll)/schichtsoll);if(elem['hteilabsp'].length>100)elem['hteilabsp'].shift();elem['stimes'].forEach((e,i) => elem['hstimes'][i]=(elem['hstimes'][i]||0)+parseInt(e||0));elem['stimes']=[];elem['teilio']=0;elem['teilnio']=0;elem['schichtdat']=Date.now()}};const elem_update=(elem,kvk,xesf,xsub,xtable,simulation) => {console.log('ELEM_UPDATE:',kvk.key,kvk.field,kvk.value||'simulation');const lnow=Date.now();switch(kvk.key){case 'Teilio':const oldteilio=elem[kvk.field];const newteilio=simulation?oldteilio+1:kvk.value;elem[kvk.field]=newteilio;break;case 'Teilnio':elem[kvk.field]=simulation?parseInt(elem[kvk.field])+1:kvk.value;break;case 'TaktIst':elem[kvk.field]=simulation?parseInt(elem[kvk.field])+1:kvk.value;break;case 'Status':const newstatus='0123456'.charAt(parseInt(Math.random()*7));const oldstatus=elem[kvk.field];elem[kvk.field]=simulation?newstatus:kvk.value;elem['stimes'][oldstatus]=(elem['stimes'][oldstatus]||0)+(lnow-elem['sdat'])/60000;elem['sdat']=lnow;break;case 'ENERGY':elem[kvk.field]=simulation?parseInt(Math.random()*1000):kvk.value;break;}elem['adat']=lnow;elem['addat']=new Date(lnow).toISOString();xesf.kvput(xsub,xtable,elem._id,kvk.field,elem[kvk.field])};const kv=[{key:'Status',field:'lstatus'},{key:'Teilio',field:'teilio'},{key:'Teilnio',field:'teilnio'},{key:'TaktIst',field:'taktist'},{key:'ENERGY',field:'energy'}];const simulation=(xsub,xtable,xenv,xesf,xkv) => {const j=parseInt(Math.random()*xenv[xtable].length),k=parseInt(Math.random()*xkv.length),lnow=Date.now();let elem=Array.prototype.filter.call(xenv[xtable],(e,i,a) => i===j);if(elem.length>0){monats_wechsel(elem[0]);schicht_wechsel(elem[0]);elem_update(elem[0],xkv[k],xesf,xsub,xtable,true)}setTimeout(() => simulation(sub,cfg.table,env,esfm,kv),5000)};if(cfg.is_simulation)setTimeout(() => simulation(sub,cfg.table,env,esfm,kv),5000);
